for (file_path in file_list) {
file_name <- gsub("_results\\.txt$", "", basename(file_path))
data_frame <- read_file(file_path)
data_frame$File <- file_name
data_list[[file_name]] <- data_frame
}
# Combine all data frames into a single data frame
combined_data <- bind_rows(data_list, .id = "File")
# Convert gene names to uppercase
combined_data$Gene <- toupper(combined_data$Gene)
# Find the common genes across all files
common_genes <- combined_data %>%
group_by(Gene) %>%
filter(n_distinct(File) == length(unique(combined_data$File))) %>%
pull(Gene)
library(tidyr)
# Filter the combined data to keep only the common genes
filtered_data <- combined_data %>%
filter(Gene %in% common_genes) %>%
pivot_wider(names_from = File, values_from = Value)
# Create the data matrix for cosine similarity calculation
data_matrix <- as.matrix(filtered_data[, -1])
rownames(data_matrix) <- filtered_data$Gene
# Load the lsa library
library(lsa)
# Assuming you have the data_matrix loaded
# Calculate the cosine similarity matrix
cosine_sim_matrix <- matrix(0, nrow = ncol(data_matrix), ncol = ncol(data_matrix))
for (i in 1:(ncol(data_matrix) - 1)) {
for (j in (i + 1):ncol(data_matrix)) {
cosine_sim_matrix[i, j] <- 1 - cosine(data_matrix[, i], data_matrix[, j])
cosine_sim_matrix[j, i] <- cosine_sim_matrix[i, j]  # Symmetric matrix
}
}
View(cosine_sim_matrix)
# Set the column and row names of the cosine similarity matrix
colnames(cosine_sim_matrix) <- colnames(data_matrix)
rownames(cosine_sim_matrix) <- colnames(data_matrix)
# Print the cosine similarity matrix
print(cosine_sim_matrix)
# Create a heatmap of the cosine similarity matrix
library(pheatmap)
pheatmap(cosine_sim_matrix, main = "Cosine Similarity Heatmap", fontsize = 8, angle_col = 45)
`drug_result(1)` <- readRDS("~/Downloads/drug_result(1).rds")
View(`drug_result(1)`)
load("~/Downloads/reference_datasets(1).RData")
View(metadata1)
View(filtered_data)
View(data_matrix)
View(filtered_data)
View(metadata1)
load("~/Downloads/reference_datasets.RData")
View(dataset1)
progeny_result <- readRDS("~/Downloads/progeny_result.rds")
View(progeny_result)
library(GEOquery)
toxicity.data.all <- getGEO("GSE59913")
View(toxicity.data.all)
toxicity.data.all[["GSE59913-GPL5424_series_matrix.txt.gz"]]@phenoData@data[["source_name_ch1"]]
toxicity.data.all[["GSE59913-GPL5425_series_matrix.txt.gz"]]@phenoData@data[["source_name_ch1"]]
toxicity.data.all[["GSE59913-GPL5426_series_matrix.txt.gz"]]@phenoData@data[["source_name_ch1"]]
toxicity.data.all[["GSE59913-GPL5426_series_matrix.txt.gz"]]@phenoData@data[["source_name_ch1"]] == "Kidney, Corn Oil, 1d"
typeof(toxicity.data.all$`GSE59913-GPL5426_series_matrix.txt.gz`)
show(toxicity.data.all$`GSE59913-GPL5426_series_matrix.txt.gz`)
dim(toxicity.data.all[["GSE59913-GPL5426_series_matrix.txt.gz"]]@assayData[["exprs"]])
toxicity.data.all[["GSE59913-GPL5426_series_matrix.txt.gz"]]@phenoData@data[["characteristics_ch1.1"]]
toxicity.data.all[["GSE59913-GPL5426_series_matrix.txt.gz"]]@phenoData@data[["source_name_ch1"]]
toxicity.gene.symbols <- toxicity.data.all[["GSE59913-GPL5426_series_matrix.txt.gz"]]@featureData@data[["GENE_SYMBOL"]]
get_indices <- function(tissue, drug, day) {
idx <- grep(paste0("^", tissue, ", ", drug, ", ", day, "$"), toxicity.data.all[["GSE59913-GPL5426_series_matrix.txt.gz"]]@phenoData@data[["source_name_ch1"]])
return(idx)
}
indices <- unlist(lapply(drugs, function(drug) get_indices("Kidney", drug, "5d")))
drugs <- c("Saline", "Ramipril", "Furosemide", "Hydrocortisone",
"Cortisone", "Valsartan", "Losartan", "Prednisolone",
"Prednisone", "Spironolactone")
indices <- unlist(lapply(drugs, function(drug) get_indices("Kidney", drug, "5d")))
indices
expression_data <- toxicity.data.all[["GSE59913-GPL5426_series_matrix.txt.gz"]]@assayData[["exprs"]][, indices]
View(expression_data)
column_names <- sapply(drugs, function(drug) paste0("Kidney, ", drug, ", 5d"))
master_df <- data.frame(expression_data)
colnames(master_df) <- column_names
rownames(master_df) <- gene_symbols
gene_symbols <- toxicity.data.all[["GSE59913-GPL5426_series_matrix.txt.gz"]]@featureData@data[["GENE_SYMBOL"]]
rownames(master_df) <- gene_symbols
View(master_df)
column_names
idx <- grep(paste0("^", tissue, ", ", drug, ", ", day, "$"), toxicity.data.all[["GSE59913-GPL5426_series_matrix.txt.gz"]]@phenoData@data[["source_name_ch1"]])
column_names <- toxicity.data.all[["GSE59913-GPL5426_series_matrix.txt.gz"]]@phenoData@data[["source_name_ch1"]][indices]
master_df <- data.frame(expression_data)
colnames(master_df) <- column_names
View(master_df)
length(gene_symbols)
dim(master_df)
master_df$genes <- gene_symbols
library(dplyr)
master_df_cleaned <- master_df %>%
distinct(genes, .keep_all = TRUE)
row.names(master_df_cleaned) <- master_df_cleaned$genes
master_df_cleaned$genes <- NULL
master_df_cleaned <- subset(master_df_cleaned, select = -c(1,15) )
View(master_df_cleaned)
master.df <- subset(master_df_cleaned, select = -c(1,15) )
View(master.df)
master_df_cleaned <- master_df %>%
distinct(genes, .keep_all = TRUE)
row.names(master_df_cleaned) <- master_df_cleaned$genes
master_df_cleaned$genes <- NULL
master.df <- subset(master_df_cleaned, select = -c(1:15) )
gene_symbols <- toxicity.data.all[["GSE59913-GPL5426_series_matrix.txt.gz"]]@featureData@data[["GENE_SYMBOL"]]
gene_symbols <- gsub("_predicted", "", gene_symbols)
indices <- unlist(lapply(drugs, function(drug) get_indices("Kidney", drug, "5d")))
expression_data <- toxicity.data.all[["GSE59913-GPL5426_series_matrix.txt.gz"]]@assayData[["exprs"]][, indices]
column_names <- toxicity.data.all[["GSE59913-GPL5426_series_matrix.txt.gz"]]@phenoData@data[["source_name_ch1"]][indices]
master_df <- data.frame(expression_data)
colnames(master_df) <- column_names
rownames(master_df) <- gene_symbols
master_df$genes <- gene_symbols
library(dplyr)
master_df_cleaned <- master_df %>%
distinct(genes, .keep_all = TRUE)
row.names(master_df_cleaned) <- master_df_cleaned$genes
master_df_cleaned$genes <- NULL
master.df <- subset(master_df_cleaned, select = -c(1:15) )
control_indices <- grep("Kidney, Saline, 5d", column_names)
control_indices <- as.integer(c(1:3))
names(master.df)
data_frames <- lapply(drugs[-1], function(drug) {
drug_indices <- grep(paste0("Kidney, ", drug, ", 5d"), column_names)
df <- master.df[, c(control_indices, drug_indices)]
colnames(df) <- c(paste0("Saline_", seq_along(control_indices)), paste0(drug, "_", seq_along(drug_indices)))
return(df)
})
drug_indices
drug_indices <- grep(paste0("Kidney, ", drug, ", 5d"), column_names)
data_frames <- lapply(drugs[-1], function(drug) {
drug_indices <- grep(paste0("Kidney, ", drug, ", 5d(\.\d+)?$"), column_names)
data_frames <- lapply(drugs[-1], function(drug) {
drug_indices <- grep(paste0("Kidney, ", drug, ", 5d(\\.\\d+)?$"), column_names)
df <- master.df[, c(control_indices, drug_indices)]
colnames(df) <- c(paste0("Saline_", gsub("Kidney, Saline, 5d(\.\d+)?", "\1", column_names[control_indices])),
data_frames <- lapply(drugs[-1], function(drug) {
drug_indices <- grep(paste0("Kidney, ", drug, ", 5d(\\.\\d+)?$"), column_names)
df <- master.df[, c(control_indices, drug_indices)]
colnames(df) <- c(paste0("Saline_", gsub("Kidney, Saline, 5d(\\.\\d+)?", "\1", column_names[control_indices])),
paste0(drug, "_", gsub(paste0("Kidney, ", drug, ", 5d(\\.\\d+)?"), "\1", column_names[drug_indices])))
return(df)
})
ramipril.df <- master.df[,c(1:5)]
View(ramipril.df)
furosemide.df <- master.df[,c(1:3,6:8)]
hydrocortisone.df <- master.df[,c(1:3,9:11)]
cortisone.df <- master.df[,c(1:3,12:14)]
ramipril.df <- master.df[,c(1:5)]
furosemide.df <- master.df[,c(1:3,6:8)]
hydrocortisone.df <- master.df[,c(1:3,9:11)]
cortisone.df <- master.df[,c(1:3,12:14)]
valsartan.df <- master.df[,c(1:3,15:17)]
losartan.df <- master.df[,c(1:3,18:20)]
prednisolone.df <- master.df[,c(1:3,21:3)]
prednisone.df <- master.df[,c(1:3,24:26)]
spironolactone.df <- master.df[,c(1:3,27:29)]
View(prednisolone.df)
prednisolone.df <- master.df[,c(1:3,21:23)]
ramipril <- master.df[,c(1:5)]
furosemide <- master.df[,c(1:3,6:8)]
hydrocortisone <- master.df[,c(1:3,9:11)]
cortisone <- master.df[,c(1:3,12:14)]
valsartan <- master.df[,c(1:3,15:17)]
losartan <- master.df[,c(1:3,18:20)]
prednisolone <- master.df[,c(1:3,21:23)]
prednisone <- master.df[,c(1:3,24:26)]
spironolactone <- master.df[,c(1:3,27:29)]
ramipril <- master.df[,c(1:5)]
colnames(ramipril) <- c(rep(0, 3), rep(1, 2))
furosemide <- master.df[,c(1:3,6:8)]
colnames(furosemide) <- c(rep(0, 3), rep(1, 3))
hydrocortisone <- master.df[,c(1:3,9:11)]
colnames(hydrocortisone) <- c(rep(0, 3), rep(1, 3))
cortisone <- master.df[,c(1:3,12:14)]
colnames(cortisone) <- c(rep(0, 3), rep(1, 3))
valsartan <- master.df[,c(1:3,15:17)]
colnames(valsartan) <- c(rep(0, 3), rep(1, 3))
losartan <- master.df[,c(1:3,18:20)]
colnames(losartan) <- c(rep(0, 3), rep(1, 3))
prednisolone <- master.df[,c(1:3,21:23)]
colnames(prednisolone) <- c(rep(0, 3), rep(1, 3))
prednisone <- master.df[,c(1:3,24:26)]
colnames(prednisone) <- c(rep(0, 3), rep(1, 3))
spironolactone <- master.df[,c(1:3,27:29)]
colnames(spironolactone) <- c(rep(0, 3), rep(1, 3))
# Save data frames as separate files
folder_path <- "/Users/ahmadali/Library/CloudStorage/OneDrive-Personal/BrandeisUniversity/__Research_120__/Data/Processed"
write.table(ramipril, file.path(folder_path, "Ramipril_GSE59913_Processed.txt"), sep = "\t", quote = FALSE)
write.table(furosemide, file.path(folder_path, "Furosemide_GSE59913_Processed.txt"), sep = "\t", quote = FALSE)
write.table(hydrocortisone, file.path(folder_path, "Hydrocortisone_GSE59913_Processed.txt"), sep = "\t", quote = FALSE)
write.table(cortisone, file.path(folder_path, "Cortisone_GSE59913_Processed.txt"), sep = "\t", quote = FALSE)
write.table(valsartan, file.path(folder_path, "Valsartan_GSE59913_Processed.txt"), sep = "\t", quote = FALSE)
write.table(losartan, file.path(folder_path, "Losartan_GSE59913_Processed.txt"), sep = "\t", quote = FALSE)
write.table(prednisolone, file.path(folder_path, "Prednisolone_GSE59913_Processed.txt"), sep = "\t", quote = FALSE)
write.table(prednisone, file.path(folder_path, "Prednisone_GSE59913_Processed.txt"), sep = "\t", quote = FALSE)
write.table(spironolactone, file.path(folder_path, "Spironolactone_GSE59913_Processed.txt"), sep = "\t", quote = FALSE)
ramipril <- master.df[,c(1:5)]
colnames(ramipril) <- c(rep(0, 3), rep(1, 2))
furosemide <- master.df[,c(1:3,6:8)]
colnames(furosemide) <- c(rep(0, 3), rep(1, 3))
hydrocortisone <- master.df[,c(1:3,9:11)]
colnames(hydrocortisone) <- c(rep(0, 3), rep(1, 3))
cortisone <- master.df[,c(1:3,12:14)]
colnames(cortisone) <- c(rep(0, 3), rep(1, 3))
valsartan <- master.df[,c(1:3,15:17)]
colnames(valsartan) <- c(rep(0, 3), rep(1, 3))
losartan <- master.df[,c(1:3,18:20)]
colnames(losartan) <- c(rep(0, 3), rep(1, 3))
prednisolone <- master.df[,c(1:3,21:23)]
colnames(prednisolone) <- c(rep(0, 3), rep(1, 3))
prednisone <- master.df[,c(1:3,24:26)]
colnames(prednisone) <- c(rep(0, 3), rep(1, 3))
spironolactone <- master.df[,c(1:3,27:29)]
colnames(spironolactone) <- c(rep(0, 3), rep(1, 3))
# Save data frames as separate files
folder_path <- "/Users/ahmadali/Library/CloudStorage/OneDrive-Personal/BrandeisUniversity/__Research_120__/Data/Processed"
write.table(ramipril, file.path(folder_path, "Ramipril_GSE59913_Processed.txt"), sep = "\t", quote = FALSE)
write.table(furosemide, file.path(folder_path, "Furosemide_GSE59913_Processed.txt"), sep = "\t", quote = FALSE)
write.table(hydrocortisone, file.path(folder_path, "Hydrocortisone_GSE59913_Processed.txt"), sep = "\t", quote = FALSE)
write.table(cortisone, file.path(folder_path, "Cortisone_GSE59913_Processed.txt"), sep = "\t", quote = FALSE)
write.table(valsartan, file.path(folder_path, "Valsartan_GSE59913_Processed.txt"), sep = "\t", quote = FALSE)
write.table(losartan, file.path(folder_path, "Losartan_GSE59913_Processed.txt"), sep = "\t", quote = FALSE)
write.table(prednisolone, file.path(folder_path, "Prednisolone_GSE59913_Processed.txt"), sep = "\t", quote = FALSE)
write.table(prednisone, file.path(folder_path, "Prednisone_GSE59913_Processed.txt"), sep = "\t", quote = FALSE)
write.table(spironolactone, file.path(folder_path, "Spironolactone_GSE59913_Processed.txt"), sep = "\t", quote = FALSE)
master.df <- na.omit(master.df)
View(master.df)
ramipril <- master.df[,c(1:5)]
colnames(ramipril) <- c(rep(0, 3), rep(1, 2))
furosemide <- master.df[,c(1:3,6:8)]
colnames(furosemide) <- c(rep(0, 3), rep(1, 3))
hydrocortisone <- master.df[,c(1:3,9:11)]
colnames(hydrocortisone) <- c(rep(0, 3), rep(1, 3))
cortisone <- master.df[,c(1:3,12:14)]
colnames(cortisone) <- c(rep(0, 3), rep(1, 3))
valsartan <- master.df[,c(1:3,15:17)]
colnames(valsartan) <- c(rep(0, 3), rep(1, 3))
losartan <- master.df[,c(1:3,18:20)]
colnames(losartan) <- c(rep(0, 3), rep(1, 3))
prednisolone <- master.df[,c(1:3,21:23)]
colnames(prednisolone) <- c(rep(0, 3), rep(1, 3))
prednisone <- master.df[,c(1:3,24:26)]
colnames(prednisone) <- c(rep(0, 3), rep(1, 3))
spironolactone <- master.df[,c(1:3,27:29)]
colnames(spironolactone) <- c(rep(0, 3), rep(1, 3))
# Save data frames as separate files
folder_path <- "/Users/ahmadali/Library/CloudStorage/OneDrive-Personal/BrandeisUniversity/__Research_120__/Data/Processed"
write.table(ramipril, file.path(folder_path, "Ramipril_GSE59913_Processed.txt"), sep = "\t", quote = FALSE)
write.table(furosemide, file.path(folder_path, "Furosemide_GSE59913_Processed.txt"), sep = "\t", quote = FALSE)
write.table(hydrocortisone, file.path(folder_path, "Hydrocortisone_GSE59913_Processed.txt"), sep = "\t", quote = FALSE)
write.table(cortisone, file.path(folder_path, "Cortisone_GSE59913_Processed.txt"), sep = "\t", quote = FALSE)
write.table(valsartan, file.path(folder_path, "Valsartan_GSE59913_Processed.txt"), sep = "\t", quote = FALSE)
write.table(losartan, file.path(folder_path, "Losartan_GSE59913_Processed.txt"), sep = "\t", quote = FALSE)
write.table(prednisolone, file.path(folder_path, "Prednisolone_GSE59913_Processed.txt"), sep = "\t", quote = FALSE)
write.table(prednisone, file.path(folder_path, "Prednisone_GSE59913_Processed.txt"), sep = "\t", quote = FALSE)
write.table(spironolactone, file.path(folder_path, "Spironolactone_GSE59913_Processed.txt"), sep = "\t", quote = FALSE)
View(ramipril)
write.table(ramipril, file.path(folder_path, "Ramipril_GSE59913_Processed.txt"), sep = "\t", quote = FALSE, row.names = TRUE)
write.table(furosemide, file.path(folder_path, "Furosemide_GSE59913_Processed.txt"), sep = "\t", quote = FALSE, row.names = TRUE)
write.table(hydrocortisone, file.path(folder_path, "Hydrocortisone_GSE59913_Processed.txt"), sep = "\t", quote = FALSE, row.names = TRUE)
write.table(cortisone, file.path(folder_path, "Cortisone_GSE59913_Processed.txt"), sep = "\t", quote = FALSE, row.names = TRUE)
write.table(valsartan, file.path(folder_path, "Valsartan_GSE59913_Processed.txt"), sep = "\t", quote = FALSE, row.names = TRUE)
write.table(losartan, file.path(folder_path, "Losartan_GSE59913_Processed.txt"), sep = "\t", quote = FALSE, row.names = TRUE)
write.table(prednisolone, file.path(folder_path, "Prednisolone_GSE59913_Processed.txt"), sep = "\t", quote = FALSE, row.names = TRUE)
write.table(prednisone, file.path(folder_path, "Prednisone_GSE59913_Processed.txt"), sep = "\t", quote = FALSE, row.names = TRUE)
write.table(spironolactone, file.path(folder_path, "Spironolactone_GSE59913_Processed.txt"), sep = "\t", quote = FALSE, row.names = TRUE)
View(Canagliflozin_GSE106156_Processed)
View(rebuilt.pred.data)
# Opening and Unpacking Data
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
setwd("Prednisone_GSE153021")
# mmf.file.folder <-  "MMF_GSE1563/GSE1563_RAW"
# mmf.data.raw <- read_csv(mmf.file.folder)
files <- list.files(pattern = "\\.txt$")
read_file <- function(file) {
df <- read.delim(file, header = TRUE, stringsAsFactors = FALSE)
colnames(df)[2] <- sub("\\.txt$", "", basename(file)) # Optional: Rename the second column to the file name (or any other unique identifier)
return(df)
}
# Read and merge all files
all_data <- lapply(files, read_file) %>%
Reduce(function(x, y) full_join(x, y, by = "Symbol"), .)
vehicle <- all_data[,c(2,6,7)]
pred <- all_data[,c(3,4,5)]
genes <- all_data$Symbol
rebuilt.pred.data <- data.frame(genes,
vehicle,
pred)
rebuilt.pred.data <- rebuilt.pred.data[!duplicated(rebuilt.pred.data$genes), ]
rownames(rebuilt.pred.data) <- rebuilt.pred.data$genes
rebuilt.pred.data$genes <- NULL
new_column_names <- c(rep("0", 3), rep("1", 3))
names(rebuilt.pred.data) <- new_column_names
# Define the file path
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
file_path <- "Processed/Prednisone_GSE153021_Processed.txt"
# Use write.table to save the matrix to a file
write.table(rebuilt.pred.data,
file = file_path, sep = "\t", quote = FALSE,
row.names = TRUE)
# Save data frames as separate files
folder_path <- "/Users/ahmadali/Library/CloudStorage/OneDrive-Personal/BrandeisUniversity/__Research_120__/Data/Processed"
# Function to validate the data frame
validate_data_frame <- function(df) {
# Check if the data frame has the expected number of columns
expected_cols <- 6
if (ncol(df) != expected_cols) {
stop(paste("Error: Expected", expected_cols, "columns, but found", ncol(df), "columns."))
}
# Check if the column names are correct
expected_col_names <- c(rep(0, 3), rep(1, 3))
if (!identical(colnames(df), expected_col_names)) {
stop("Error: Incorrect column names.")
}
# Check if there are any missing values
if (anyNA(df)) {
warning("Warning: Missing values found in the data frame.")
}
# Check if there are any infinite values
if (any(is.infinite(df))) {
warning("Warning: Infinite values found in the data frame.")
}
# If all checks pass, print a success message
cat("Data frame validation passed.\n")
}
# Validate each data frame
validate_data_frame(ramipril)
# Validate each data frame
# validate_data_frame(ramipril)
validate_data_frame(furosemide)
View(hydrocortisone)
# Ramipril, Furosemide, Hydrocortisone, Cortisone, Valsartan,
# Losartan, Prednisolone, Prednisone, Spironolactone
# Rename columns to 0's and 1's
# ramipril <- master.df[,c(1:5)]
# colnames(ramipril) <- c(rep(0, 3), rep(1, 2))
new_column_names
furosemide <- master.df[,c(1:3,6:8)]
colnames(furosemide) <- new_column_names
# Validate each data frame
# validate_data_frame(ramipril)
validate_data_frame(furosemide)
head(furosemide)
View(cortisone)
# Function to validate the data frame
# Function to validate the data frame
validate_data_frame <- function(df) {
# Check if the data frame has the expected number of columns
expected_cols <- 6
if (ncol(df) != expected_cols) {
stop(paste("Error: Expected", expected_cols, "columns, but found", ncol(df), "columns."))
}
# Check if the column names are correct
expected_col_names <- c(rep("0", 3), rep("1", 3))
if (!identical(colnames(df), expected_col_names)) {
stop("Error: Incorrect column names.")
}
# Check if there are any missing values
if (anyNA(df)) {
warning("Warning: Missing values found in the data frame.")
}
# Check if there are any infinite values
if (any(is.infinite(df))) {
warning("Warning: Infinite values found in the data frame.")
}
# If all checks pass, print a success message
cat("Data frame validation passed.\n")
}
# Validate each data frame
# validate_data_frame(ramipril)
validate_data_frame(furosemide)
spironolactone <- as.data.frame(master.df[,c(1:3,27:29)])
colnames(spironolactone) <- c(rep(0, 3), rep(1, 3))
typeof(prednisolone)
furosemide <- as.data.frame(master.df[,c(1:3,6:8)])
colnames(furosemide) <- new_column_names
hydrocortisone <- as.data.frame(master.df[,c(1:3,9:11)])
colnames(hydrocortisone) <- c(rep(0, 3), rep(1, 3))
cortisone <- as.data.frame(master.df[,c(1:3,12:14)])
colnames(cortisone) <- c(rep(0, 3), rep(1, 3))
valsartan <- as.data.frame(master.df[,c(1:3,15:17)])
colnames(valsartan) <- c(rep(0, 3), rep(1, 3))
losartan <- as.data.frame(master.df[,c(1:3,18:20)])
colnames(losartan) <- c(rep(0, 3), rep(1, 3))
prednisolone <- as.data.frame(master.df[,c(1:3,21:23)])
colnames(prednisolone) <- c(rep(0, 3), rep(1, 3))
prednisone <- as.data.frame(master.df[,c(1:3,24:26)])
colnames(prednisone) <- c(rep(0, 3), rep(1, 3))
spironolactone <- as.data.frame(master.df[,c(1:3,27:29)])
colnames(spironolactone) <- c(rep(0, 3), rep(1, 3))
# Save data frames as separate files
folder_path <- "/Users/ahmadali/Library/CloudStorage/OneDrive-Personal/BrandeisUniversity/__Research_120__/Data/Processed"
# write.table(ramipril, file.path(folder_path, "Ramipril_GSE59913_Processed.txt"), sep = "\t", quote = FALSE, row.names = TRUE)
write.table(furosemide, file.path(folder_path, "Furosemide_GSE59913_Processed.txt"), sep = "\t", quote = FALSE, row.names = TRUE)
write.table(hydrocortisone, file.path(folder_path, "Hydrocortisone_GSE59913_Processed.txt"), sep = "\t", quote = FALSE, row.names = TRUE)
write.table(cortisone, file.path(folder_path, "Cortisone_GSE59913_Processed.txt"), sep = "\t", quote = FALSE, row.names = TRUE)
write.table(valsartan, file.path(folder_path, "Valsartan_GSE59913_Processed.txt"), sep = "\t", quote = FALSE, row.names = TRUE)
write.table(losartan, file.path(folder_path, "Losartan_GSE59913_Processed.txt"), sep = "\t", quote = FALSE, row.names = TRUE)
write.table(prednisolone, file.path(folder_path, "Prednisolone_GSE59913_Processed.txt"), sep = "\t", quote = FALSE, row.names = TRUE)
write.table(prednisone, file.path(folder_path, "Prednisone_GSE59913_Processed.txt"), sep = "\t", quote = FALSE, row.names = TRUE)
write.table(spironolactone, file.path(folder_path, "Spironolactone_GSE59913_Processed.txt"), sep = "\t", quote = FALSE, row.names = TRUE)
# Function to validate the data frame
validate_data_frame <- function(df) {
# Check if the data frame has the expected number of columns
expected_cols <- 6
if (ncol(df) != expected_cols) {
stop(paste("Error: Expected", expected_cols, "columns, but found", ncol(df), "columns."))
}
# Check if the column names are correct
expected_col_names <- c(rep("0", 3), rep("1", 3))
if (!identical(colnames(df), expected_col_names)) {
stop("Error: Incorrect column names.")
}
# Check if there are any missing values
if (anyNA(df)) {
warning("Warning: Missing values found in the data frame.")
}
# Check if there are any infinite values
if (any(is.infinite(df))) {
warning("Warning: Infinite values found in the data frame.")
}
# If all checks pass, print a success message
cat("Data frame validation passed.\n")
}
# Validate each data frame
# validate_data_frame(ramipril)
validate_data_frame(furosemide)
typeof(furosemide)
prednisone <- as.data.frame(master.df[,c(1:3,24:26)])
furosemide <- as.data.frame(master.df[,c(1:3,6:8)])
colnames(furosemide) <- new_column_names
hydrocortisone <- as.data.frame(master.df[,c(1:3,9:11)])
colnames(hydrocortisone) <- c(rep(0, 3), rep(1, 3))
cortisone <- as.data.frame(master.df[,c(1:3,12:14)])
colnames(cortisone) <- c(rep(0, 3), rep(1, 3))
valsartan <- as.data.frame(master.df[,c(1:3,15:17)])
colnames(valsartan) <- c(rep(0, 3), rep(1, 3))
losartan <- as.data.frame(master.df[,c(1:3,18:20)])
colnames(losartan) <- c(rep(0, 3), rep(1, 3))
prednisolone <- as.data.frame(master.df[,c(1:3,21:23)])
colnames(prednisolone) <- c(rep(0, 3), rep(1, 3))
prednisone <- as.data.frame(master.df[,c(1:3,24:26)])
colnames(prednisone) <- c(rep(0, 3), rep(1, 3))
spironolactone <- as.data.frame(master.df[,c(1:3,27:29)])
colnames(spironolactone) <- c(rep(0, 3), rep(1, 3))
typeof(furosemide)
# Ramipril, Furosemide, Hydrocortisone, Cortisone, Valsartan,
# Losartan, Prednisolone, Prednisone, Spironolactone
# Rename columns to 0's and 1's
# ramipril <- master.df[,c(1:5)]
# colnames(ramipril) <- c(rep(0, 3), rep(1, 2))
# new_column_names
furosemide <- as.data.frame(master.df[,c(1:3,6:8)])
typeof(furosemide)
View(furosemide)
new_column_names
new_column_names
colnames(furosemide) <- new_column_names
# write.table(ramipril, file.path(folder_path, "Ramipril_GSE59913_Processed.txt"), sep = "\t", quote = FALSE, row.names = TRUE)
write.table(furosemide, file.path(folder_path, "Furosemide_GSE59913_Processed.txt"), sep = "\t", quote = FALSE, row.names = TRUE)
#Load the necessary libraries
library(GEOquery)
library(DESeq2)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# source("chdir.R")
# source('nipals.R')
library(readr)
library(AnnotationDbi)
library(org.Hs.eg.db)
library(hgu133plus2.db)
library(dplyr)
# Atorvastatin ------------------------------------------------------------
# Opening and Unpacking Data
atorvastatin.file.data <-  "Atorvastatin_GSE196701/GSE196701_gene_expression.csv"
atorvastatin.data.raw <- read_csv(atorvastatin.file.data)
atorvastatin.data.raw <- as.data.frame(atorvastatin.data.raw)
# Cleaning Data
atorvastatin.data <- atorvastatin.data.raw[,c(3:9)]
atorvastatin.data.cleaned <- na.omit(atorvastatin.data, subset = "gene_symbol")
atorvastatin.data.cleaned <- atorvastatin.data.cleaned %>%
distinct(gene_symbol, .keep_all = TRUE)
row.names(atorvastatin.data.cleaned) <- atorvastatin.data.cleaned$gene_symbol
ato.df <- cbind(atorvastatin.data.cleaned[,c(5:7)],
atorvastatin.data.cleaned[,c(2:4)])
Atorvastatin_GSE196701_Processed <- ato.df
new_column_names <- c(rep("0", 3), rep("1", 3))
names(Atorvastatin_GSE196701_Processed) <- new_column_names
# Write on File
# Define the file path
file_path <- "Processed/Atorvastatin_GSE196701_Processed.txt"
# Use write.table to save the matrix to a file
write.table(Atorvastatin_GSE196701_Processed,
file = file_path, sep = "\t", quote = FALSE,
row.names = TRUE)
str(Atorvastatin_GSE196701_Processed)
str(furosemide)
furosemide_df <- as.data.frame(master.df[,c(1:3,6:8)])
colnames(furosemide_df) <- new_column_names
row.names(furosemide_df) <- row.names(master.df)
write.table(furosemide_df, file.path(folder_path, "Furosemide_GSE59913_Processed.txt"), sep = "\t", quote = FALSE, row.names = TRUE)
getGEO(GSE199437)
lisinopril.file.data <-  "Lisinopril_GSE199437/GSE199437_DKD_all_rpkm_counts.csv.gz"
lisinopril.data.raw <- read_csv(lisinopril.file.data)
lisinopril.data.raw <- as.data.frame(lisinopril.data.raw)
View(lisinopril.data.raw)
